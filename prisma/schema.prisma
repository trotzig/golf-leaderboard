// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                      String    @default(cuid()) @id
  email                   String    @unique
  authToken               String?   @unique
  sendEmailOnFinished     Boolean   @default(true)
  sendEmailOnStart        Boolean   @default(false)
  sendEmailOnHotStreak    Boolean   @default(true)
  createdAt               DateTime  @default(now())
  favorites               Favorite[]
}

model SignInAttempt {
  id           String    @default(cuid()) @id
  email        String
  token        String
  confirmedAt  DateTime?
  createdAt    DateTime  @default(now())
  favoritedPlayerId  String?
  favoritedPlayer    Player?  @relation(fields: [favoritedPlayerId], references: [id])
}

model Favorite {
  id        String  @default(cuid()) @id
  player    Player  @relation(fields: [playerId], references: [id])
  playerId  String
  account   Account @relation(fields: [accountId], references: [id])
  accountId String
  @@unique([accountId, playerId])
}

model ResultNotified {
  id               String   @default(cuid()) @id
  roundNumber      Int
  notificationType String @default("finished")
  competitionId    Int
  playerId         String
  player           Player   @relation(fields: [playerId], references: [id])
  createdAt        DateTime @default(now())
  @@unique([roundNumber, competitionId, playerId, notificationType])
}

model Player {
  id          String    @id
  slug        String    @unique
  firstName   String
  lastName    String
  clubName    String?
  oomPosition String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  competitionScore PlayerCompetitionScore[]
  resultNotified ResultNotified[]
  favorites   Favorite[]
  leaderBoardEntries LeaderboardEntry[]
  favoritedOnSignIns SignInAttempt[]
}

model PlayerCompetitionScore {
  playerId      String
  competitionId Int
  position      String
  scoreText     String
  score         Int
  player        Player @relation(fields: [playerId], references: [id])
  competition   Competition @relation(fields: [competitionId], references: [id])
  @@id([playerId, competitionId])
}

model Competition {
  id               Int     @id
  name             String
  slug             String  @unique
  venue            String?
  start            DateTime
  end              DateTime
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @default(now())
  visible          Boolean   @default(true)
  competitionScore PlayerCompetitionScore[]
  leaderboardEntries LeaderboardEntry[]
}

model LeaderboardEntry {
  playerId      String
  player        Player @relation(fields: [playerId], references: [id])
  competitionId Int
  competition   Competition @relation(fields: [competitionId], references: [id])
  positionText  String
  position      Int
  scoreText     String
  score         Int
  hole          String @default("-")
  updatedAt     DateTime  @default(now())
  @@id([competitionId, position])
}
